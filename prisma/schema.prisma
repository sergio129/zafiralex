// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Usamos la conexión con pool de conexiones para consultas regulares
  url       = env("DATABASE_URL")
  // Usamos la conexión directa para migraciones
  directUrl = env("DIRECT_URL")
}

// Modelo para los testimonios
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  company   String?
  position  String?
  content   String   @db.Text
  type      String // 'text' o 'video'
  videoUrl  String?
  rating    Int      @default(5)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para las noticias
model News {
  id        String   @id @default(cuid())
  title     String
  summary   String
  content   String   @db.Text
  date      DateTime
  imageData Bytes? // Datos binarios de la imagen
  imageName String? // Nombre original del archivo
  mimeType  String? // Tipo MIME de la imagen
  category  String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para usuarios administradores
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("admin") // Valores: "admin", "editor", "secretaria", "abogado"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para mensajes de contacto
model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String
  message    String   @db.Text
  status     String   @default("pending") // pending, in-progress, completed
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assignedTo String? // ID del usuario asignado (opcional)
}

// Modelo para documentos legales
model Document {
  id          String   @id @default(cuid())
  documentRef String   @unique // Consecutivo único con formato fecha + 5 dígitos aleatorios
  title       String
  description String?
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  uploadedBy  String   // ID del usuario que subió el documento
  category    String?  // Categoría del documento (opcional)
  tags        String?  // Tags separados por comas (opcional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
